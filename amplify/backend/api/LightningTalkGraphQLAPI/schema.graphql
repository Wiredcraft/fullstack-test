type LightningTalksPoll
  @model
  @auth(rules: [{ allow: public }, { allow: private }, { allow: owner }]) {
  id: ID!
  type: String!
    @default(value: "Poll")
    @index(
      name: "lightningTalksByType"
      queryField: "getLightningTalksByType"
      sortKeyFields: ["numberOfVotes"]
    )
  title: String!
  description: String!
  username: String!
  numberOfVotes: Int! @default(value: "0")
}

type VotingRecord
  @model
  @auth(rules: [{ allow: public }, { allow: private }, { allow: owner }]) {
  id: ID!
  lightningTalkPollID: ID!
  username: ID!
  upvote: Boolean @default(value: "true")
  hasVotedBefore: Boolean @default(value: "true")
}

type Mutation {
  updateNumberOfVotesCountAtomicallyResolver(
    lightningTalkPollID: String!
    undulation: Int!
  ): String @function(name: "updateNumberOfVotesCountAtomicallyResolver-${env}")
}
